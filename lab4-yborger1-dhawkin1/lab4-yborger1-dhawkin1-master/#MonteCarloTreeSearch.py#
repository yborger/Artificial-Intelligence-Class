########################################
# CS63: Artificial Intelligence, Lab 4
# Fall 2022, Swarthmore College
########################################

#NOTE: You will probably want to use these imports. Feel free to add more.
from lib2to3.pgen2.token import ISTERMINAL
from math import log, sqrt
from pickle import NONE

class Node(object):
    """Node used in MCTS"""
    def __init__(self, state):
        self.state = state
        self.children = {} # maps moves to Nodes
        self.visits = 0    # number of times node was in select/expand path
        self.wins = 0      # number of wins for player +1
        self.losses = 0    # number of losses for player +1
        self.value = 0     # value (from player +1's perspective)
        self.untried_moves = list(state.availableMoves) # moves to try 
        
    def updateValue(self, outcome):
        """
        Increments self.visits.
        Updates self.wins or self.losses based on the outcome, and then
        updates self.value. 

        This function will be called during the backpropagation phase
        on each node along the path traversed in the selection and 
        expansion phases.

        outcome: Who won the game. 
                 +1 for a 1st player win
                 -1 for a 2nd player win
                  0 for a draw
        """

        self.visits += 1 
        if outcome == 1:
            self.wins += 1 
        elif outcome == -1:
            self.losses += 1 
        self.value = 1 +(self.wins-self.losses)/self.visits 

        return


    def UCBWeight(self, UCB_const, parent_visits, parent_turn):
        """
        Weight from the UCB formula used by parent to select a child.

        This function calculates the weight for JUST THIS NODE. The
        selection phase, implemented by the MCTSPlayer, is responsible
        for looping through the parent Node's children and calling
        UCBWeight on each.
        
        UCB_const: the C in the UCB formula.
        parent_visits: the N in the UCB formula.
        parent_turn: Which player is making a decision at the parent node.
           If parent_turn is +1, the stored value is already from the
           right perspective. If parent_turn is -1, value needs to be
           converted to -1's perspective.
        returns the UCB weight calculated
        """
        UCB_weight = value + UCB_const * sqrt(log(parent_visits/self.visits)

        if parent_turn == -1:
            UCB_weight*= -1
        return UCB_weight


class MCTSPlayer(object):
    """Selects moves using Monte Carlo tree search."""
    def __init__(self, num_rollouts=1000, UCB_const=1.0):
        self.name = "MCTS"
        self.num_rollouts = int(num_rollouts)
        self.UCB_const = UCB_const
        self.nodes = {} # dictionary that maps states to their nodes

    def getMove(self, game_state):
        """Returns best move from the game_state after applying MCTS"""
        #TODO: find existing node in tree or create a node for game_state
        #      and add it to the tree
        #TODO: call MCTS to perform rollouts
        #TODO: return the best move from the current player's perspective

        key = str(game_state)
        if key in nodes.keys():
            curr_node = self.nodes.get(key)
        else:
            curr_node = Node(game_state)
            self.nodes.update(key, value) 
        MCTS(curr_node) 
        best_val = -float("inf"); best_move = None 
        for move, child_node in game_state.childen():
            if game_state.turn() == +1:
                value = child_node.value
            else:
                value = 2 - child_node.value
            if value > best_val:
                best_val = value 
                best_move = move

        return best_move 





    def status(self, node):
        """
        This method is used solely for debugging purposes. Given a 
        node in the MCTS tree, reports on the node's data (wins, losses,
        visits, values), as well as the data of all of its immediate
        children. Helps to verify that MCTS is working properly.
        Returns: None
        """
        
        print("node wins:", node.wins, "   losses:", node.losses, "   visits:", 
            node.visits, "   value:", node.value, "   move:", node.move)
        
    def MCTS(self, current_node):
        """
        Plays out random games from the current node to a terminal state.
        Each rollout consists of four phases:
        1. Selection: Nodes are selected based on the max UCB weight.
                      Ends when a node is reached where not all children 
                      have been expanded.
        2. Expansion: A new node is created for a random unexpanded child.
        3. Simulation: Uniform random moves are played until end of game.
        4. Backpropagation: Values and visits are updated for each node
                     on the path traversed during selection and expansion.
        Returns: None
        """

        for i in self.num_rollouts:
            path = self.selection(current_node)
            select = #final node in path
            if select.ISTERMINAL == True:
                outcome = self.winner()
            else:
                next_node = expansion(select)
                path.append(next_node)
                outcome = simulation(next_node.state)
            backpropagation(path,outcome)
        status(current_node)


        #TODO: selection 
        #TODO: expansion
        #TODO: simulation
        #TODO: backpropagation
        #TODO: after all rollouts completed, call status on current_node
        #      to view a summary of results 
        raise NotImplementedError("TODO")


    def selection(self):
"""
    choose a root R (self) and keep choosing the BEST children until 
    leaf L (end of path, not necessarily terminal) is reached
    returns: a path
"""
    #all very iffy lol trying to make and update variables needed to call UCBWeight and loop through best child to get best for
    #either direction 
    best_play1= 0
    best_play2= float("inf")
    parent_turn = 1
    parent_visits = 0
    #while not end 
    for child in self.children:
        parent_visits +=1
        if UCBWeight(UCB_const, parent_visits, parent_turn)> best and parent_turn = 1:
                best_play1 = UCBWeight(self, UCB_const, parent_visits, parent_turn)
        if UCBWeight(UCB_const, parent_visits, parent_turn)< best and parent_turn = -1:
                best_play2 = UCBWeight(self, UCB_const, parent_visits, parent_turn)
    #go to the best node found? then loop to end and return 
                                            
        
    
                                              
    def expansion(self):
"""
    if self is not terminal, got to its child (make a child!) :D
    returns: next_node
"""
    def simulation(self):
"""
    rollout from point C (whatever is returned in expansion), until a terminal point
    returns: outcome
"""
    def backpropagation(self):
"""
    given a path and outcome, updates stats along the treeeeeeeeeeeeeeeeeeeee
    returns: nothing, it's an updating function
≈ç≈ç"""
